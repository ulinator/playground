{"version":3,"sources":["App.module.css","components/Timer/Timer.js","App.js","serviceWorker.js","index.js","img/pommodoro.png"],"names":["module","exports","Pommodoro","list","subtitle","timeLeft","buttons__action","buttons__option","button","button__start","button__pause","Timer","props","react_default","a","createElement","className","styles","secs","sec_num","parseInt","Math","floor","map","v","filter","i","join","toHHMMSS","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","countDown","state","updateTimer","startTimer","isTicking","console","log","_intervalCreate","setInterval","setState","intervalID","pauseTimer","clearInterval","resetTimer","newTimeValue","timerMode","workLength","breakLength","changeTimerMode","newLength","playAlert","time","Date","value","_this2","src","pommodoro","onClick","alt","toUpperCase","components_Timer_Timer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fea39114.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pommodoro\":\"App_Pommodoro__RiFtx\",\"list\":\"App_list__SMIYA\",\"subtitle\":\"App_subtitle__h8kl4\",\"timeLeft\":\"App_timeLeft__13Nre\",\"buttons__action\":\"App_buttons__action__1xDrh\",\"buttons__option\":\"App_buttons__option__2vaN7\",\"button\":\"App_button__mLoOi\",\"button__start\":\"App_button__start__2QaXg\",\"button__pause\":\"App_button__pause__1ONqV\"};","import React from 'react';\r\nimport styles from '../../App.module.css';\r\n\r\n\r\nconst Timer = (props) =>  {\r\n\r\n  const toHHMMSS = (secs) => {\r\n    const sec_num = parseInt(secs, 10)\r\n    const hours   = Math.floor(sec_num / 3600) % 24\r\n    const minutes = Math.floor(sec_num / 60) % 60\r\n    const seconds = sec_num % 60\r\n\r\n    return [hours,minutes,seconds]\r\n      .map(v => v < 10 ? \"0\" + v : v)\r\n      .filter((v,i) => v !== \"00\" || i > 0)\r\n      .join(\":\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <time className={styles.timeLeft}>{toHHMMSS(props.timeLeft)}</time>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport pommodoro from './img/pommodoro.png'; \nimport styles from './App.module.css';\nimport Timer from './components/Timer/Timer.js';\n\nclass Pommodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date(),\n      timerMode: \"work\",\n      workLength: 1500,\n      breakLength: 300,\n      timeLeft: 1500,\n      isTicking: false,\n      intervalID: 0\n    };\n  }\n\n  countDown = () => {\n    let { timeLeft } = this.state;\n\n    timeLeft--;\n    this.updateTimer(timeLeft);\n  }\n\n  updateTimer(value) {\n    if (value === 0) {\n      this.playAlert();\n      this.pauseTimer();\n    }\n\n    this.setState({timeLeft: value});\n  }\n\n  startTimer = () => {\n    if (this.state.isTicking) {\n      console.log(\"timer already running!\");\n      return false;\n    }\n\n    const _interval = () => {\n            this.countDown();\n          },\n          _intervalCreate = setInterval( _interval, 1000);\n\n    this.setState({ \n        isTicking: true,\n        intervalID: _intervalCreate\n    });\n  }\n\n  pauseTimer = () => {\n    clearInterval( this.state.intervalID );\n    this.setState({isTicking: false});\n  }\n\n  resetTimer = () => {\n    const { timerMode } = this.state,\n          newTimeValue = timerMode === 'work' ? this.state.workLength : this.state.breakLength;\n\n    this.pauseTimer();\n    this.updateTimer(newTimeValue);\n  }\n\n  changeTimerMode = () => {\n    const { timerMode } = this.state,\n          newLength = timerMode === 'break' ? this.state.workLength : this.state.breakLength;\n\n    this.setState({\n      timerMode: timerMode === 'break' ? 'work' : 'break'\n    })\n\n    this.pauseTimer();\n    this.updateTimer(newLength);\n  }\n\n  playAlert = () => {\n    console.log(\"TING\");\n  }\n\n  render() {\n\n    return (\n      <div className={styles.Pommodoro}>\n\n        <h1>Pommodoro</h1>\n\n        <figure>\n          <img \n            src={pommodoro}  \n            onClick={ () => this.updateTimer(3) } \n            alt=\"Pommodoro timer\" />\n        </figure>\n\n        <p className={styles.subtitle}>\n          { this.state.timerMode.toUpperCase() } time left: \n        </p>\n\n        <Timer timeLeft={this.state.timeLeft} />\n\n        <div className={styles.buttons__action}>\n          <button\n            className={styles.button__start}\n            onClick={ this.startTimer }>\n            start timer</button>\n          <button\n            className={styles.button__pause}\n            onClick={ this.pauseTimer }>\n            pause timer</button>\n        </div>\n\n        <div className={styles.buttons__option}>\n          <button\n            className={styles.button}\n            onClick={ this.changeTimerMode }>\n            change mode</button>\n          <button\n            className={styles.button}\n            onClick={ this.resetTimer }>\n            reset timer</button>\n        </div>\n\n        <ol className={styles.list}><strong>Technika Pomodoro krok po kroku</strong>\n          <li>Zrób listę swoich zadań, posortuj ją według ważności.</li>\n          <li>Podziel zadania na „pomidory” – czyli na takie kawałki, które da się zrealizować w 25 minut.</li>\n          <li>Weź minutnik i ustaw go na 25 minut.</li>\n          <li>Zrealizuj pierwsze zadanie nie odrywając się od niego. Nie rób w tym czasie niczego innego, nie odbieraj telefonów, nie sprawdzaj poczty. Rób jedną i tylko jedną rzecz.</li>\n          <li>Kiedy timer zadzwoni, zrób 5 minut przerwy i ustaw timer ponownie na 25 minut. Swoje zrealizowane pierwsze zadanie oznacz na liście jako wykonane.</li>\n          <li>Po zrealizowaniu 4 zadań – pomidorów zrób dłuższą przerwę, od 15 do 30 minut. Tyle ile potrzebujesz aby odpocząć ( możesz właśnie wtedy sprawdzić pocztę), potem powtórz cały cykl od początku.</li>\n        </ol>\n\n        <ol className={styles.list}><strong>Święte zasady Techniki Pomodoro</strong>\n          <li>Przerwę możesz zacząć tylko w momencie, kiedy zadzwoni minutnik, nie wcześniej.</li>\n          <li>Jeżeli masz zadanie wymagające poświęcenia mu dużej ilości czasu, podziel je na mniejsze części.</li>\n          <li>Odwrotnie, jeżeli zadanie jest krótsze niż jeden „pomidor”, dorzuć do niego kolejne krótkie zadanie, aby cały „pomidor” był wypełniony.</li>\n          <li>Restrykcyjne stosowanie Techniki Pomodoro nie zawsze jest sensowne. Być może Twoje zadania wymagają 40 minutowych pomidorów, zamiast 25 minut. Może wtedy dla Ciebie lepsza będzie 10 minutowa przerwa. Ty wiesz najlepiej. Dopasuj tę technikę do specyfiki Twojej pracy.</li>\n          <li>Nie korzystaj z tej techniki w swoim wolnym czasie. </li>\n        </ol>\n\n      </div>\n    );\n  }\n}\n\nexport default Pommodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/pommodoro.ad8d347b.png\";"],"sourceRoot":""}